When would you want to use a remote repository rather than keeping all your work local?
  When I need to access my files from any system rather than my local system and make changes to it and commit it and simultaneously 
  maintain commit history as well, I will use remote repository rather than keeping all my work local. 

 Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    When its done manualy we can govern when to commit when there is a logical change. If Git autoatically stays up-to-date with y remote repository, there might be chances it updates the repository when there is no logical change and there might be useless commits taking up the space.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork creates a copy of the repository on GitHub, directly on your own GitHub profile and the new commits will reflect on your new forked repository under your profile. 
		Clone can create a copy of the repository present remotely or on the same local machine, to your local system and the new commits will be saved in your own system. 
	Branches create new chain of commits which are accessible from one of its parent commit in the master branch existing in your repositories that can in your local machine or present remotely.

    When we need to copy a repository on GitHub directly to our own profile and make changes to it  we use forks instead of clones as cloning can do the same but in a long process of pull and push. When we are concerned with copying a repository to our own system we use clone. When we simply need to commit changes in a repository we use branch. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    This lets us know what changes we have made through our local system since we last synched with our remote repository. 

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without using Git or GitHub we can collaborate by making our project public to let people see it and download it then if they want to suggest changes they can contact the owner and propose changes. But in this it will be very difficult to see others work and changes on the same project or their views and reviews on it or to know how many are working on it untill and unless the owner itself publish about all this. So it becomes very difficult for the owner also to entertain each one interested on the project.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When we are testing with some new features to incorporate in main program with whose success we are not clear and we know it might need modifications or complete deletion in future, then we make such changes in a separate branch which we can later merge into main branch if we wish to do so. When we are sure with the development in the project we can directly make changes in the master. Having different branch makes the push and pull functions complicated whereas in the master we can easily directly do push and pull.
