What happens when you initialize a repository? Why do you need to do it?
	On initializing a repository a .git repository is created in that repository that will record the history of files in that repository.
	We need to do this to support version control for our repository and to make use of the benefits of version control in our repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Working directory contains all files in my directory whereas staging area contains only those files from among all the files in the directory that will be committed in the repository in 1 commit.

	It helps to separate the files according to the separate commits they will require. So each logical change needs to be added 1 at a time, hence files in 1 logical change together is added to staging area and commit is done to save that change in the repository. 

How can you use the staging area to make sure you have one commit per logical change?
	Using 'git diff' command we can know what new changes to the files are made in the working directory as it compares working directory with the staging area. Using 'git diff --staged' command we can see that staging area contains how many new logical changes then accordingly we can commit. This command compares the staging area and repository. Therefore in this way we'll know that each commit is contaning only one logical change.  

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	While developing when there are situations like we need to make same functions in different versions while working mainstream, branches help a lot in keeping our history organized and managable.
		We can make branches for each different version that we make other than the mainstream work and name them. 


How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
